<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Echoleee</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="git@github.com:Echoleee/Echoleee.github.io.git/"/>
  <updated>2017-12-14T03:56:01.745Z</updated>
  <id>git@github.com:Echoleee/Echoleee.github.io.git/</id>
  
  <author>
    <name>柳蕊</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一点点说明QAQ</title>
    <link href="git@github.com:Echoleee/Echoleee.github.io.git/2017/12/14/%E4%B8%80%E7%82%B9%E7%82%B9%E8%AF%B4%E6%98%8EQAQ/"/>
    <id>git@github.com:Echoleee/Echoleee.github.io.git/2017/12/14/一点点说明QAQ/</id>
    <published>2017-12-14T03:35:34.000Z</published>
    <updated>2017-12-14T03:56:01.745Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于评论系统"><a href="#关于评论系统" class="headerlink" title="关于评论系统"></a>关于评论系统</h2><p>1.emmm<strong>微信登录</strong>应该是在<strong>网页</strong>上才可以用QAQ 会有一个二维码弹窗，扫码登录；<br>2.<strong>移动端</strong>倘若采用<strong>微信之外</strong>的登录，要在<strong>浏览器</strong>打开，因为微信自带的浏览器应该<strong>不支持弹窗</strong>，在浏览器的弹窗中登录后，<strong>关闭弹窗</strong>就是已经登录好的页面啦~<br>3.<strong>“简单登录”</strong>其实有点像游客登录，但是要求输入邮箱、昵称、密码；邮箱是为了我后台操作可以私下回复你，密码就是为了验证？讲道理邮箱和密码都可以<strong>随意输入</strong>，昵称是最后会显示在评论页面当中哒！</p><h2 id="关于移动端浏览"><a href="#关于移动端浏览" class="headerlink" title="关于移动端浏览"></a>关于移动端浏览</h2><p>移动端浏览显示的是网页的缩略版；<br>如果对搭建博客感兴趣的话，可以打开网页版，跳转到我的<strong>Github</strong>查看一些代码和参数；<br>如果对我感兴趣的话（我在说什么？？），可以打开网页版，跳转到我的<strong>Email</strong>、<strong>Instagram</strong>、<strong>Weibo</strong>；</p><h2 id="关于本地搜索功能"><a href="#关于本地搜索功能" class="headerlink" title="关于本地搜索功能"></a>关于本地搜索功能</h2><p>目前还有<strong>bug</strong>诶orz，后续再更新吧= =<br><img src="https://i.imgur.com/94jP7F6.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;关于评论系统&quot;&gt;&lt;a href=&quot;#关于评论系统&quot; class=&quot;headerlink&quot; title=&quot;关于评论系统&quot;&gt;&lt;/a&gt;关于评论系统&lt;/h2&gt;&lt;p&gt;1.emmm&lt;strong&gt;微信登录&lt;/strong&gt;应该是在&lt;strong&gt;网页&lt;/strong&gt;上才可以
      
    
    </summary>
    
      <category term="说明" scheme="git@github.com:Echoleee/Echoleee.github.io.git/categories/%E8%AF%B4%E6%98%8E/"/>
    
    
      <category term="说明" scheme="git@github.com:Echoleee/Echoleee.github.io.git/tags/%E8%AF%B4%E6%98%8E/"/>
    
  </entry>
  
  <entry>
    <title>写给2017年的自己</title>
    <link href="git@github.com:Echoleee/Echoleee.github.io.git/2017/12/14/%E5%86%99%E7%BB%992017%E5%B9%B4%E7%9A%84%E8%87%AA%E5%B7%B1/"/>
    <id>git@github.com:Echoleee/Echoleee.github.io.git/2017/12/14/写给2017年的自己/</id>
    <published>2017-12-13T16:50:09.000Z</published>
    <updated>2017-12-13T16:54:17.131Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="年度总结" scheme="git@github.com:Echoleee/Echoleee.github.io.git/categories/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="-年度总结 -加密" scheme="git@github.com:Echoleee/Echoleee.github.io.git/tags/%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93-%E5%8A%A0%E5%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>用Github+Hexo搭建博客（三）</title>
    <link href="git@github.com:Echoleee/Echoleee.github.io.git/2017/12/13/%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>git@github.com:Echoleee/Echoleee.github.io.git/2017/12/13/用Github-Hexo搭建博客（三）/</id>
    <published>2017-12-13T12:49:28.000Z</published>
    <updated>2017-12-14T03:34:55.791Z</updated>
    
    <content type="html"><![CDATA[<p>搭建这个博客，我用到了Github、Hexo、notepad++和MarkdownPad.<br>利用notepad++查看和修改各式文本文件，利用MarkdownPad进行博客的编写，通过Hexo这个框架解析生成静态页面，然后部署到托管代码的Github上供大家浏览。<br><strong>第三部分：关于博客主题的配置和MarkdownPad2的一些Tips</strong></p><a id="more"></a><p>我的系统 windows10；<br>所有用户名统一是Echoleee；<br>接下来我们一步一步一步一步来 orz</p><h2 id="配置主题"><a href="#配置主题" class="headerlink" title="配置主题"></a>配置主题</h2><h3 id="首先你需要知道配置主题的基本流程："><a href="#首先你需要知道配置主题的基本流程：" class="headerlink" title="首先你需要知道配置主题的基本流程："></a>首先你需要知道配置主题的基本流程：</h3><h4 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h4><p>（建议使用方法二）</p><ul><li>方法一：</li></ul><p>到相应主题的网站下载压缩包，解压至blog/Git/blog/themes目录下</p><ul><li>方法二：</li></ul><p>用Git checkout代码来安装主题，好处是以后可以通过<code>git pull</code>来快速更新，不需要总是下载压缩包替换，方便许多。</p><blockquote><p>以HUNO主题为例：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> blog</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> git://github.com/someus/huno/.git themes/huno</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/EdCfXQq.png" alt=""></p><h4 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h4><p>打开Git/blog/_config.yml将theme后改成你所使用的主题，如huno<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo c</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo g</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo s</span></span><br></pre></td></tr></table></figure></p><p>打开本地预览窗口预览新主题的初始页面</p><h4 id="主题个性化设置"><a href="#主题个性化设置" class="headerlink" title="主题个性化设置"></a>主题个性化设置</h4><p>打开Git/blog/themes/主题名/_config.yml进行个性化的主题配置</p><blockquote><p><strong>你需要知道：</strong><br>不同的主题的主题基础配置不同，这依据于主题开发者的设计<br>添加第三方服务的难易程度也取决于不同主题开发者的设计<br>每个主题的配置，只能针对性地查看开发者设计和百度了 QAQ<br>所以到这里就没有一个详细的教程了 QAQ</p></blockquote><h3 id="一些你可能用得上的东西"><a href="#一些你可能用得上的东西" class="headerlink" title="一些你可能用得上的东西"></a>一些你可能用得上的东西</h3><h4 id="关于如何创建评论系统"><a href="#关于如何创建评论系统" class="headerlink" title="关于如何创建评论系统"></a>关于如何创建评论系统</h4><p>原先国内的主流第三方评论系统首选“多说”，但是几年前这个系统关闭了orz<br>在挑选替代评论系统的时候，看到了大佬的第三方评论系统评测：</p><blockquote><p><a href="https://blog.shuiba.co/comment-systems-recommendation" target="_blank" rel="noopener">第三方评论系统推荐</a></p></blockquote><p>斟酌了一下，决定用韩国的LiveRe评论系统，LiveRe的缺点就是加载慢以及无法导入评论，其他方面都还令人满意。<br><strong>首先你需要注册一个LiveRe账号：</strong></p><blockquote><p>官网：<a href="https://livere.com/" target="_blank" rel="noopener">来必力</a></p></blockquote><p>获得安装代码<br><strong>以下举两个不同主题的安装实例：</strong></p><ul><li>Huno主题</li></ul><p>在主题配置文件_config.yml中增加如下代码：<br>（被我打码的uid可以在你在官网中所得安装代码的第二行找到）<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Support for LiveRe comments <span class="keyword">system</span>.</span><br><span class="line"># You can get your uid <span class="keyword">from</span> https:<span class="comment">//livere.com/insight/myCode (General web site)</span></span><br><span class="line">livere_uid: your uid</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/e3uCy4J.png" alt=""><br>在themes/huno/layout/_partials/comment.ejs中粘贴完整安装代码保存：<br><img src="https://i.imgur.com/U5lZwK7.png" alt=""></p><ul><li>NexT主题</li></ul><p>在主题配置文件_config.yml中增加如下代码：<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Support for LiveRe comments <span class="keyword">system</span>.</span><br><span class="line"># You can get your uid <span class="keyword">from</span> https:<span class="comment">//livere.com/insight/myCode (General web site)</span></span><br><span class="line">livere_uid: your uid</span><br></pre></td></tr></table></figure></p><p>截图如上Huno主题~<br>安装完成！<br>在LiveRe官网的管理页面可以管理你的评论啦，还可以设置评论框主题、登录方式、评论提醒等等功能。</p><hr><h4 id="关于如何进行网站统计"><a href="#关于如何进行网站统计" class="headerlink" title="关于如何进行网站统计"></a>关于如何进行网站统计</h4><p>国内网站推荐使用百度统计~<br><strong>首先你还是先需要注册一个百度统计账号：</strong></p><blockquote><p>官网：<a href="https://tongji.baidu.com/web/welcome/login" target="_blank" rel="noopener">百度统计——最大的中文网站分析平台</a></p></blockquote><p>在百度统计官网管理 - 代码管理 - 代码获取中复制代码<br><strong>以下举两个不同主题的安装实例：</strong></p><ul><li>Huno主题</li></ul><p>打开themes/huno/layout/_partials/footer.ejs，将代码粘贴保存<br><img src="https://i.imgur.com/oSrInaL.png" alt=""><br>在百度统计官网管理-代码管理-代码安装检查中可以检查代码安装状态<br><img src="https://i.imgur.com/W6pNVtZ.png" alt=""></p><ul><li>NexT主题</li></ul><p>复制代码倒数第二行的<code>hm.js?</code>后面的一串ID<br>在主题配置文件_config.yml中找到：<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># Baidu Analytics ID</span></span><br><span class="line"><span class="symbol">baidu_analytics:</span></span><br></pre></td></tr></table></figure></p><p>将复制的ID粘贴在这里：<br><img src="https://i.imgur.com/DY4fl0a.png" alt=""><br>在百度统计官网管理-代码管理-代码安装检查中可以检查代码安装状态<br>截图如上Huno主题~</p><hr><h4 id="关于如何进行站内搜索"><a href="#关于如何进行站内搜索" class="headerlink" title="关于如何进行站内搜索"></a>关于如何进行站内搜索</h4><p>在Algolia官网用Github账号登录：</p><blockquote><p>官网：<a href="https://www.algolia.com/users/sign_in" target="_blank" rel="noopener">Sign in | Algolia</a></p></blockquote><p><img src="https://i.imgur.com/QmzyPCt.png" alt=""><br>创建一个新的index：<br><img src="https://i.imgur.com/MPH2KPt.png" alt=""><br>获得API Keys：<br><img src="https://i.imgur.com/lw8DBc7.png" alt=""><br>打开Git/blog/_config.yml，增加参数值：<br><img src="https://i.imgur.com/1o3ARyS.png" alt=""><br>在blog目录下安装algolia插件并执行：<br><img src="https://i.imgur.com/HHEK1iL.png" alt=""><br><img src="https://i.imgur.com/UpNorMP.png" alt=""><br>依据报错信息可知需要环境变量，需要用户重新申请多一个拥有Add records, Delete records, List indices, Delete index权限的API Key，并将其导出为环境变量：<br><img src="https://i.imgur.com/WHoPF98.png" alt=""><br><img src="https://i.imgur.com/F76R9CP.png" alt=""><br>创建成功后导入，然后再试一次：<br><img src="https://i.imgur.com/BfzlYvR.png" alt=""><br><img src="https://i.imgur.com/GWGQMva.png" alt=""><br>到现在上传数据到Algolia已经成功！！<br>接下来的步骤依不同主题而不同：<br>（开始po大神链接）</p><blockquote><p><strong>非NexT主题：</strong><br><a href="https://blog.naaln.com/2016/07/hexo-with-algolia/" target="_blank" rel="noopener">Hexo集成Algolia搜索插件</a><br><strong>NexT主题:</strong><br><a href="http://blog.csdn.net/luzheqi/article/details/52798557" target="_blank" rel="noopener">NexT主题集成Algolia搜索插件</a></p></blockquote><hr><h4 id="关于如何创建新页面"><a href="#关于如何创建新页面" class="headerlink" title="关于如何创建新页面"></a>关于如何创建新页面</h4><p><strong>以NexT主题创建留言本为例</strong><br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new<span class="built_in"> page </span>guestbook</span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/jLtzXT7.png" alt=""><br>打开上面创建的index.md，增加来必力安装代码：<br><img src="https://i.imgur.com/AP6DaHt.png" alt=""><br>打开主题配置的_config.yml，增加guestbook：<br><img src="https://i.imgur.com/lQzJpBy.png" alt=""><br>打开themes/next/languages/zh-Hans.yml增加中文语言中的对应值：<br><img src="https://i.imgur.com/1Ih9IuM.png" alt=""><br>部署检验，耶！</p><hr><h4 id="关于如何置顶文章"><a href="#关于如何置顶文章" class="headerlink" title="关于如何置顶文章"></a>关于如何置顶文章</h4><p>打开blog/node_modules/hexo-generator-index/lib/generator.js，将内容替换成：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> pagination = <span class="built_in">require</span>(<span class="string">'hexo-pagination'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">locals</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = <span class="keyword">this</span>.config;</span><br><span class="line">  <span class="keyword">var</span> posts = locals.posts;</span><br><span class="line">    posts.data = posts.data.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.top &amp;&amp; b.top) &#123; </span><br><span class="line">            <span class="keyword">if</span>(a.top == b.top) <span class="keyword">return</span> b.date - a.date;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> b.top - a.top; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a.top &amp;&amp; !b.top) &#123; </span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!a.top &amp;&amp; b.top) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> b.date - a.date; <span class="comment">// </span></span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="keyword">var</span> paginationDir = config.pagination_dir || <span class="string">'page'</span>;</span><br><span class="line">  <span class="keyword">return</span> pagination(<span class="string">''</span>, posts, &#123;</span><br><span class="line">    perPage: config.index_generator.per_page,</span><br><span class="line">    layout: [<span class="string">'index'</span>, <span class="string">'archive'</span>],</span><br><span class="line">    format: paginationDir + <span class="string">'/%d/'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      __index: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>在写文章的时候，在信息页加入：<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">top:</span> <span class="number">1000</span></span><br></pre></td></tr></table></figure></p><p>（数值越大越靠前，由此来自主为文章排序~）</p><hr><h4 id="关于如何给文章加密"><a href="#关于如何给文章加密" class="headerlink" title="关于如何给文章加密"></a>关于如何给文章加密</h4><p>打开themes/next/layout/_partials/head.swig，加入代码：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript">    (<span class="function"><span class="keyword">function</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span>(<span class="string">'&#123;&#123; page.password &#125;&#125;'</span>)&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="keyword">if</span> (prompt(<span class="string">'输入访问密码呀'</span>) !== <span class="string">'&#123;&#123; page.password &#125;&#125;'</span>)&#123;</span></span><br><span class="line"><span class="actionscript">                alert(<span class="string">'密码错误嗷'</span>);</span></span><br><span class="line"><span class="undefined">                history.back();</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)();</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在写文章的时候，在信息页加入：<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">password:</span> password</span><br></pre></td></tr></table></figure></p><p>（自主设定密码~）</p><hr><h4 id="后续可能还会有更新吧嘻嘻"><a href="#后续可能还会有更新吧嘻嘻" class="headerlink" title="后续可能还会有更新吧嘻嘻"></a>后续可能还会有更新吧嘻嘻</h4><hr><h2 id="关于MarkdownPad2"><a href="#关于MarkdownPad2" class="headerlink" title="关于MarkdownPad2"></a>关于MarkdownPad2</h2><h3 id="下载MarkdownPad2"><a href="#下载MarkdownPad2" class="headerlink" title="下载MarkdownPad2"></a>下载MarkdownPad2</h3><blockquote><p>官网下载链接：<a href="http://markdownpad.com/" target="_blank" rel="noopener">MarkdownPad</a></p></blockquote><p>倘若win10用户打开后有这个玩意儿：<br><img src="https://i.imgur.com/BfJsCmz.png" alt=""><br>是因为少了一个插件，官网上有解决办法和插件安装方法：</p><blockquote><p>官网：<a href="http://markdownpad.com/faq.html#livepreview-directx" target="_blank" rel="noopener">MarkdownPad-FAQ</a><br>安装 Awesomium 1.6.6 SDK.</p></blockquote><h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><ul><li>方法一：</li></ul><blockquote><p>使用chrome插件：<a href="https://chrome.google.com/webstore/detail/%E5%9B%B4%E8%84%96%E6%98%AF%E4%B8%AA%E5%A5%BD%E5%9B%BE%E5%BA%8A/pngmcllbdfgmhdgnnpfaciaolgbjplhe?utm_source=chrome-app-launcher-info-dialog" target="_blank" rel="noopener">微博是个好图床</a></p></blockquote><p>直接将图片拖进去就可以生成链接</p><ul><li>方法二：</li></ul><blockquote><p>创建一个和_posts一起的文件用来放这篇文章所用的图片，每篇文章对应一个md文件和一个同名的图片文件夹，我觉得算是归类比较整齐，比较舒服啦~</p></blockquote><p>打开blog/_config.yml将post_asset_folder改成true:<br><img src="https://i.imgur.com/XRemGrZ.png" alt=""><br>安装插件：<br><img src="https://i.imgur.com/tCZHWVD.png" alt=""></p><h3 id="Markdown语法"><a href="#Markdown语法" class="headerlink" title="Markdown语法"></a>Markdown语法</h3><blockquote><p><a href="https://www.appinn.com/markdown/" target="_blank" rel="noopener">Markdown语法说明（简体中文版）</a></p></blockquote><p><strong>一个小小的补充说明</strong><br>关于如何调整插入图片的大小：<br><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](）&#123;:<span class="built_in">width</span>=<span class="string">""</span> <span class="built_in">height</span>=<span class="string">""</span>&#125;</span><br></pre></td></tr></table></figure></p><h3 id="MarkdownPad2破解版"><a href="#MarkdownPad2破解版" class="headerlink" title="MarkdownPad2破解版"></a>MarkdownPad2破解版</h3><blockquote><p><a href="http://w3cboy.com/post/2014/10/MarkdownPad%E6%B3%A8%E5%86%8C%E7%A0%81/" target="_blank" rel="noopener">MarkdownPad注册码</a></p></blockquote><hr><p><strong>用Github+Hexo搭建博客算是全部记录好啦！其实不大算得上是一篇教程，说它是一篇笔记更为合适吧~ 将来若有他用时在这里可以找到记录，可能比到时再翻各式各样的教程效率更高一些！</strong><br><strong>整个记录当中若有什么错误，或者有什么更好的实现方法，还请大神指正啦！！</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;搭建这个博客，我用到了Github、Hexo、notepad++和MarkdownPad.&lt;br&gt;利用notepad++查看和修改各式文本文件，利用MarkdownPad进行博客的编写，通过Hexo这个框架解析生成静态页面，然后部署到托管代码的Github上供大家浏览。&lt;br&gt;&lt;strong&gt;第三部分：关于博客主题的配置和MarkdownPad2的一些Tips&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="BLOG教程" scheme="git@github.com:Echoleee/Echoleee.github.io.git/categories/BLOG%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="BLOG教程" scheme="git@github.com:Echoleee/Echoleee.github.io.git/tags/BLOG%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>用Github+Hexo搭建博客（二）</title>
    <link href="git@github.com:Echoleee/Echoleee.github.io.git/2017/12/13/%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>git@github.com:Echoleee/Echoleee.github.io.git/2017/12/13/用Github-Hexo搭建博客（二）/</id>
    <published>2017-12-13T11:03:12.000Z</published>
    <updated>2017-12-14T03:34:42.718Z</updated>
    
    <content type="html"><![CDATA[<p>搭建这个博客，我用到了Github、Hexo、notepad++和MarkdownPad.<br>利用notepad++查看和修改各式文本文件，利用MarkdownPad进行博客的编写，通过Hexo这个框架解析生成静态页面，然后部署到托管代码的Github上供大家浏览。<br><strong>第二部分：博客自定义参数，并将Hexo生成的静态页面部署到Github上</strong></p><a id="more"></a><p>我的系统 windows10；<br>所有用户名统一是Echoleee；<br>接下来我们一步一步一步一步来 orz</p><h2 id="安装可能需要的插件"><a href="#安装可能需要的插件" class="headerlink" title="安装可能需要的插件"></a>安装可能需要的插件</h2><p>安装前记得：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> blog</span></span><br></pre></td></tr></table></figure></p><p>以下是可能用得到的插件：<br>1.便于部署到Github上的插件<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-deployer-git --save</span></span><br></pre></td></tr></table></figure></p><p>2.安装 atom 生成插件（便于感兴趣的小伙伴订阅）<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-generator-feed --save</span></span><br></pre></td></tr></table></figure></p><p>3.安装博客索引生成插件<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="keyword">install</span> hexo-generator-<span class="keyword">index</span> <span class="comment">--save</span></span><br></pre></td></tr></table></figure></p><p>4.安装归档生成插件<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="keyword">install</span> hexo-generator-<span class="keyword">archive</span> <span class="comment">--save</span></span><br></pre></td></tr></table></figure></p><p>5.安装标签生成插件（tag）<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-<span class="keyword">tag</span> <span class="title">--save</span></span><br></pre></td></tr></table></figure></p><p>6.安装分类生成插件（category）<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="keyword">install</span> hexo-generator-<span class="keyword">category</span> <span class="comment">--save</span></span><br></pre></td></tr></table></figure></p><p>7.安装Sitemap文件生成插件（便于搜索引擎抓取网页）<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-generator-sitemap --save</span></span><br></pre></td></tr></table></figure></p><p>8.安装百度Sitemap文件生成插件（普通的Sitemap格式不符合百度的要求）<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="keyword">install </span>hexo-generator-<span class="keyword">baidu-sitemap </span>--save</span><br></pre></td></tr></table></figure></p><p>9.安装本地搜索功能插件<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="keyword">install</span> hexo-generator-<span class="keyword">search</span> –<span class="keyword">save</span></span><br></pre></td></tr></table></figure></p><p>（因为后来的本地搜索换成了algoliasearch，所以这个又移除这个插件）<br>10.渲染器<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-renderer-marked --save</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-renderer-stylus –save</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-renderer-jade --save</span></span><br></pre></td></tr></table></figure></p><p>11.安装可视化博客编辑插件<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="keyword">install</span> hexo-<span class="keyword">admin</span> –<span class="keyword">save</span></span><br></pre></td></tr></table></figure></p><p>12.安装本地预览插件<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="keyword">install</span> hexo-<span class="keyword">server</span> <span class="comment">--save</span></span><br></pre></td></tr></table></figure></p><p>照着上面的清单安装就OK，如果之后用到特定的插件再补充就好；<br>如果想看每个插件安装命令运行后的代码，我就顺带po一下如下截图 QAQ<br><img src="https://i.imgur.com/smWdATY.png" alt=""><br><img src="https://i.imgur.com/4iycksH.png" alt=""><br><img src="https://i.imgur.com/Ho0yHEa.png" alt=""><br><img src="https://i.imgur.com/3v1h1ii.png" alt=""></p><hr><p><strong>备注：</strong><br>很多时候，我们记不清使用 npm 安装过的某个插件的版本了，这时候该怎么办呢？</p><blockquote><p><a href="http://blog.csdn.net/u011500781/article/details/53066630" target="_blank" rel="noopener">查看使用 npm 安装插件的版本号</a></p></blockquote><hr><h2 id="迫不及待地看看博客的本地预览"><a href="#迫不及待地看看博客的本地预览" class="headerlink" title="迫不及待地看看博客的本地预览"></a>迫不及待地看看博客的本地预览</h2><p>1.生成静态页面</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo <span class="keyword">generate</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/X8qvfRr.png" alt=""><br>2.开启预览访问端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo server</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/8dn6cYt.png" alt=""><br>打开图示：<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a><br>呐，这是在本地预览的Hexo初始博客~<br><img src="https://i.imgur.com/NPrNZJe.png" alt=""></p><hr><h2 id="个性化设置博客参数"><a href="#个性化设置博客参数" class="headerlink" title="个性化设置博客参数"></a>个性化设置博客参数</h2><p><strong>在_config.yml上修改参数</strong><br>（推荐使用方法二）</p><ul><li><strong>方法一：</strong></li></ul><p>打开Git Bash，运行之后直接修改参数！<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim _config.yml</span></span><br></pre></td></tr></table></figure></p><ul><li><strong>方法二：</strong></li></ul><p>下载notepad++来修改_config.yml文件</p><blockquote><p>官网：<a href="https://notepad-plus-plus.org/" target="_blank" rel="noopener">Notepad++Home</a></p></blockquote><p>打开之后是这样的页面：<br><img src="https://i.imgur.com/FSM07xr.png" alt=""></p><blockquote><p><strong>注意：</strong><br><strong>接下来在notepad++中修改的所有内容，除了“https://” 中的冒号以外，其他每个冒号后面都有个空格！</strong></p></blockquote><p>需要修改的参数，看官网和某大神的一篇文章就好，讲得清清楚楚，明明白白~</p><blockquote><p><a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="noopener">配置 | Hexo</a><br><a href="http://blog.csdn.net/xuezhisdc/article/details/53130383" target="_blank" rel="noopener">hexo教程系列——hexo配置教程</a></p></blockquote><p>然后就一起也PO一下我修改的截图吧！<br>（Echoleee是我Github的用户名噢）<br><strong>emmm如果之前没有选SSH Key，url记得应该是要改成：<br><a href="http://github.com/Echoleee/Echoleee.github.io.git" target="_blank" rel="noopener">http://github.com/Echoleee/Echoleee.github.io.git</a></strong><br><img src="https://i.imgur.com/V1hgbsb.png" alt=""><br><img src="https://i.imgur.com/CAyRsvN.png" alt=""><br><img src="https://i.imgur.com/7ZP7gEF.png" alt=""><br>到现在博客初始主题和基础部分都准备好啦！</p><hr><h2 id="发布一篇测试文章"><a href="#发布一篇测试文章" class="headerlink" title="发布一篇测试文章"></a>发布一篇测试文章</h2><p>打开Git Bash；<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> blog</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo new <span class="string">'文章名称'</span></span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/g8gJsvx.png" alt=""><br>按照上面的路径用notepad++打开md文件；<br>可以在上下的两个’- - -‘中间添加诸如tags、categories等等等等的信息；<br>第二个’- - -‘之后就是正文，支持markdown语句；<br><img src="https://i.imgur.com/B6CZWiy.png" alt=""><br>修改后保存~<br>可以依照步骤二打开本地预览窗口查看你的测试文章：<br><img src="https://i.imgur.com/B8KdbWe.png" alt=""></p><hr><h2 id="部署到Github上"><a href="#部署到Github上" class="headerlink" title="部署到Github上"></a>部署到Github上</h2><p>现在你的本地预览窗口里面已经有个性化的设置和第一篇测试文章啦！<br>现在我们将其部署至Github上供每一个打开链接的网友浏览。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> blog</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo clean</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo generate</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo deploy</span></span><br></pre></td></tr></table></figure></p><p>最后一步结束部署完成显示：</p><blockquote><p>INFO Deploy done: git</p></blockquote><p><img src="https://i.imgur.com/Da1EeGM.png" alt=""></p><p>然后现在打开 <a href="http://Echoleee.github.io" target="_blank" rel="noopener">http://Echoleee.github.io</a><br>显示的就是本地预览页面的样子啦~<br>开心！<br><img src="https://i.imgur.com/okzrNd1.png" alt=""></p><hr><p><strong>关于一些命令的写法tips：</strong><br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo server</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></p><p>可以分别简写成：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo c</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo g</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo s</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> hexo d</span></span><br></pre></td></tr></table></figure></p><p>生成静态页面和部署可以合起来写作：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo d -g</span></span><br></pre></td></tr></table></figure></p><p>可以顺带debug，如：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo s -debug</span></span><br></pre></td></tr></table></figure></p><hr><p><strong>第二部分，博客自定义参数，并将Hexo生成的静态页面部署到Github上均已完成！</strong><br><strong>第三部分我们来看看关于博客主题的配置和MarkdownPad2的一些Tips~</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;搭建这个博客，我用到了Github、Hexo、notepad++和MarkdownPad.&lt;br&gt;利用notepad++查看和修改各式文本文件，利用MarkdownPad进行博客的编写，通过Hexo这个框架解析生成静态页面，然后部署到托管代码的Github上供大家浏览。&lt;br&gt;&lt;strong&gt;第二部分：博客自定义参数，并将Hexo生成的静态页面部署到Github上&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="BLOG教程" scheme="git@github.com:Echoleee/Echoleee.github.io.git/categories/BLOG%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="BLOG教程" scheme="git@github.com:Echoleee/Echoleee.github.io.git/tags/BLOG%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>用Github+Hexo搭建博客（一）</title>
    <link href="git@github.com:Echoleee/Echoleee.github.io.git/2017/12/13/%E7%94%A8Github-Hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>git@github.com:Echoleee/Echoleee.github.io.git/2017/12/13/用Github-Hexo搭建博客（一）/</id>
    <published>2017-12-12T16:56:44.000Z</published>
    <updated>2017-12-14T03:34:49.278Z</updated>
    
    <content type="html"><![CDATA[<p>搭建这个博客，我用到了Github、Hexo、notepad++和MarkdownPad.<br>利用notepad++查看和修改各式文本文件，利用MarkdownPad进行博客的编写，通过Hexo这个框架解析生成静态页面，然后部署到托管代码的Github上供大家浏览。<br><strong>第一部分：Hexo和Github的初始搭建</strong></p><a id="more"></a><p>我的系统 windows10；<br>所有用户名统一是Echoleee；<br>接下来我们一步一步一步一步来 orz</p><h2 id="安装-Node"><a href="#安装-Node" class="headerlink" title="安装 Node"></a>安装 Node</h2><blockquote><p>作用：用来生成静态页面<br>官网下载链接：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a></p></blockquote><p>检验安装完成：<br>Win + R ；打开cmd；查询node版本号：<br><img src="https://i.imgur.com/JnfcpPm.png" alt=""></p><hr><h2 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h2><blockquote><p>作用：把本地的Hexo内容提交到Github<br>官网下载链接：<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git-Downloads</a></p></blockquote><p>检验安装完成：<br>Win + R ；打开cmd；查询git版本号：<br><img src="https://i.imgur.com/0AJKg0U.png" alt=""></p><hr><h2 id="注册-Github账号"><a href="#注册-Github账号" class="headerlink" title="注册 Github账号"></a>注册 Github账号</h2><blockquote><p>官网链接：<a href="https://github.com/" target="_blank" rel="noopener">GitHub</a></p></blockquote><p><strong>注册完记得登录邮箱确认呀！！</strong><br><img src="https://i.imgur.com/qoLu7fD.png" alt=""></p><hr><h2 id="配置-Github账号"><a href="#配置-Github账号" class="headerlink" title="配置 Github账号"></a>配置 Github账号</h2><p>注册好了之后来到以下页面，选择New repository 创建代码库：<br><img src="https://i.imgur.com/Ds1evVN.png" alt=""><br>Repository name 就写“代码库名字.github.io“；例如我创建了一个名为Echoleee的代码库：<br><strong>代码库的名字一定要和你的Github用户名一样！！</strong><br><img src="https://i.imgur.com/C4jJYgw.png" alt=""><br>创建后的页面如下：<br><img src="https://i.imgur.com/z5cc2wU.png" alt=""></p><hr><h2 id="建立-gh-page-分支"><a href="#建立-gh-page-分支" class="headerlink" title="建立 gh-page 分支"></a>建立 gh-page 分支</h2><p>Github 项目的静态页面解析需要用到gh-page分支；<br>Gh-page 建立成功后Echoleee.github.io 这个网址就可以访问啦~</p><p>选择 Settings：<br><img src="https://i.imgur.com/oqURFnS.png" alt=""><br>下拉找到 GitHub Pages ；<br>如果直接看到“Launch automatic page generator“就直接点，Github会直接创建出一个gh-pages的页面，等一会会，就可以访问Echoleee.github.io这个网址啦！<br><strong>然而 qwq</strong><br>如果是这样的：<br>（Github页面的发布源设置为None）<br><img src="https://i.imgur.com/XHIbvXd.png" alt=""><br>把 None 改成 Master 分支就好…<br><strong>然然而 qwq</strong><br>这一步我点开None，不能改成master分支。我尝试了两个方法，目测应该是方法一最终解决；方法二是官网提供的解决方法，然而我最后没有弄明白诶。</p><ul><li>方法一：</li></ul><blockquote><p>直接点选 Github Pages 下面的 Theme Chooser ，暂时先随意挑选一个主题，Github自带的主题并不好看，不过没四因为我们接下来会重新换主题的啦~</p></blockquote><p><img src="https://i.imgur.com/We72KFa.png" alt=""><br>Select a theme，然后一路确定下来（sorry忘记截图，但是这部分应该没有难度啦~），你惊喜地发现挑了主题之后，原来没有显示master分支也有了，这时候你的主页也有啦！<br>这时候你回到gh-pages：<br><img src="https://i.imgur.com/RsrIrXO.png" alt=""></p><blockquote><p>“Your site is ready to be published at <strong><a href="https://echoleee.github.io/" target="_blank" rel="noopener">https://echoleee.github.io/</a></strong>.”</p></blockquote><p>打开网址，获得你独立域名的初始博客。<br><img src="https://i.imgur.com/JrjKoaG.png" alt=""></p><ul><li>方法二：</li></ul><blockquote><p>官网上的解决办法：<a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Pages</a></p></blockquote><p>但是我在运行命令时会有如下提示：<br><img src="https://i.imgur.com/qUnRW1O.png" alt=""><br>按照提示输入user.name和user.email也无解orz<br>不知道你们可不可以诶<br>反正后来我就没有试下去了qwq</p><hr><h2 id="配置-SSH-Key"><a href="#配置-SSH-Key" class="headerlink" title="配置 SSH Key"></a>配置 SSH Key</h2><p><strong>贴一段解释：</strong><br>加密传输的算法有好多，git使用rsa，rsa要解决的一个核心问题是，如何使用一对特定的数字，使其中一个数字可以用来加密，而另外一个数字可以用来解密。这两个数字就是你在使用git和github的时候所遇到的public key也就是公钥以及private key私钥。<br>其中，公钥就是那个用来加密的数字，这也就是为什么你在本机生成了公钥之后，要上传到github的原因。从github发回来的，用那公钥加密过的数据，可以用你本地的私钥来还原。<br>如果你的key丢失了，不管是公钥还是私钥，丢失一个都不能用了，解决方法也很简单，重新再生成一次，然后在github.com里再设置一次就行。</p><blockquote><p>摘录自：<a href="http://blog.csdn.net/male09/article/details/72627815?utm_source=itdadao&amp;utm_medium=referral" target="_blank" rel="noopener">10分钟教你把项目保存到github仓库保管代码</a></p></blockquote><p>这个环节，选做吧~<br>不配置 SSH Key 的话，以后每次对自己的博客有改动提交的时候就要手动输入账号密码，配置了就不需要再输入账号密码啦！ </p><p><strong>配置过程</strong><br>打开Git Bash<br><strong>1.检测是否存在SSH Key</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/.ssh</span></span><br></pre></td></tr></table></figure></p><p>或者你直接手动打开文件资源管理器查看，一般路径是C:\Users\“用户名”，有一个文件夹名为.ssh，有的话就是原来就已经存在SSH Key啦。<br><strong>2.用<code>ssh-keygen</code>来生成SSH Key</strong><br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C<span class="string">"邮箱"</span></span><br><span class="line">$ git<span class="built_in"> config </span>--global user.name<span class="string">"用户名"</span></span><br><span class="line">$ git<span class="built_in"> config </span>--global user.email<span class="string">"邮箱"</span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/Gj5Ga6X.jpg" alt=""><br>依照上面显示的路径打开.ssh文件夹：<br><img src="https://i.imgur.com/EaWboeo.png" alt=""><br>打开 Pub 文件，复制全文<br><strong>3.设置 Github 项目的 Deploy keys</strong><br>打开 Github，在 Settings 里面找到 Deploy keys：<br><img src="https://i.imgur.com/6XmTBKu.png" alt=""><br>把复制的Pub文件内容粘贴在“Key”里面；<br>Title可以自己命名（可以和repo配套，就比较好区分）;<br><strong>注意要勾选“Allow write access”，这张截图是一开始没有勾选的时候，后来不知道花了多少时间才找到一直报错的原因 QAQ</strong><br><img src="https://i.imgur.com/W0gPK3m.jpg" alt=""><br>输入密码 to confirm：<br><img src="https://i.imgur.com/0WwKhUj.png" alt=""><br><strong>4.确认SSH Key 有效</strong><br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>ssh -T git<span class="variable">@github</span>.com</span><br></pre></td></tr></table></figure></p><p>前面的warning都可以不必理会，最后看见一下提示就OK：</p><blockquote><p>You’ve successfully authenticated, but Github does not provide shell access.</p></blockquote><p><img src="https://i.imgur.com/BSd2XT6.png" alt=""><br>现在打开 Github 的 Deploy keys 发现原来灰灰的钥匙变成了绿色啦！<br><img src="https://i.imgur.com/POWt03V.png" alt=""><br>至此，将SSH key部署到Github成功~</p><hr><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><p><strong>安装前Hexo可以阅读：</strong></p><blockquote><p>Hexo官方：<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">文档 | Hexo</a><br>大神的一些Tips：<a href="https://segmentfault.com/a/1190000003710962" target="_blank" rel="noopener"> hexo博客搭建时遇到的一些问题</a></p></blockquote><p>安装过程要是出现WARN好像都不要紧的，出现ERR!才是报错~<br>命令运行后出现所安装插件的版本号，代表安装成功！<br><strong>1.使用 npm 安装 Hexo</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -g hexo-cli</span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/azlcTp9.png" alt=""><br><strong>2.初始化 blog 文件夹</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo init blog</span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/jyipIsn.png" alt=""><br><strong>3.切换到该blog路径</strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> blog</span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/RpxZOFt.png" alt=""><br><strong>4.选做：</strong><br>用淘宝镜像cnpm运行速度会比npm快，只要如下安装好了之后，之后的命令语句中将npm统一写成cnpm就好；有一个命令cnpm是做不到的，还是得用npm，但是我忘记了orz，想用cnpm的朋友们可以百度一下；以下安装我依旧采用npm ~<br>使用cnpm：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install cnpm -g --registry=http://registry.npm.taobao.org</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cnpm install</span></span><br></pre></td></tr></table></figure></p><p><strong>5.安装 npm：</strong><br>npm是Hexo的一个扩展插件<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install</span></span><br></pre></td></tr></table></figure></p><p><strong>对了，这两一小部分的截图有错，后来改了之后忘记了重新截 orz ；Git bash 的路径不应该在Desktop，应该直接cd到blog就好；直接在blog应该不会报错~</strong><br>那么，像我这么粗心，就导致了在桌面新建了一个blog文件夹来安装npm，接下来一步一步报错… 怎么办 QAQ<br>（以下是万一在安装过程出现类似报错的解决办法）<br><img src="https://i.imgur.com/QQsnyte.png" alt=""><br><strong>解决办法：</strong><br>（应该是项目目录下没有package.json这个文件，用npm init -f命令生成）<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm init -f</span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/Ylytker.png" alt=""><br>重新再安装一遍就OK：<br><img src="https://i.imgur.com/ZxrxHwl.png" alt=""><br>现在我们来检验一下，Hexo和npm都已安装好：<br>没错，又是查询版本号 QAQ<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo -v</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm -v</span></span><br></pre></td></tr></table></figure></p><p><img src="https://i.imgur.com/qtd5lei.png" alt=""></p><hr><p><strong>第一部分，Hexo和Github的初始搭建均已完成！</strong><br><strong>第二部分我们来看看如何为博客自定义参数，并将Hexo生成的静态页面部署到Github上~</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;搭建这个博客，我用到了Github、Hexo、notepad++和MarkdownPad.&lt;br&gt;利用notepad++查看和修改各式文本文件，利用MarkdownPad进行博客的编写，通过Hexo这个框架解析生成静态页面，然后部署到托管代码的Github上供大家浏览。&lt;br&gt;&lt;strong&gt;第一部分：Hexo和Github的初始搭建&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="BLOG教程" scheme="git@github.com:Echoleee/Echoleee.github.io.git/categories/BLOG%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="BLOG教程" scheme="git@github.com:Echoleee/Echoleee.github.io.git/tags/BLOG%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
</feed>
